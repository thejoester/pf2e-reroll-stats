name: Release Creation

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 22 (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: |
          npm ci
          npx --no-install @foundryvtt/foundryvtt-cli --version

      - name: Determine version from tag
        id: get_version
        run: |
          RAW="${{ github.event.release.tag_name }}"
          echo "version=${RAW#v}" >> "$GITHUB_OUTPUT"

      - name: Validate module.json is valid JSON
        run: node -e "JSON.parse(require('fs').readFileSync('module.json','utf8')); console.log('module.json OK')"

      - name: Fail early if pack source is missing
        run: |
          if ! find packs -type d -name "_source" -print -quit | grep -q . ; then
            echo "No pack sources found. Expected at least one: packs/<pack-name>/_source/*.json"
            exit 1
          fi
          echo "Found the following _source folders:"
          find packs -type d -name "_source" -print

      - name: Compile packs
        run: node ./_build/compile-all-packs.mjs ./packs

      - name: Update module.json for release
        run: |
          set -e
          VERSION="${{ steps.get_version.outputs.version }}"
          OWNER_REPO="${{ github.repository }}"
          TAG="${{ github.event.release.tag_name }}"
          IS_PRERELEASE="${{ github.event.release.prerelease }}"

          sudo apt-get update && sudo apt-get install -y jq

          # Use tag-specific manifest for prereleases (since /latest ignores them),
          # and /latest for stable releases.
          if [ "$IS_PRERELEASE" = "true" ]; then
            MANIFEST_URL="https://github.com/${OWNER_REPO}/releases/download/${TAG}/module.json"
          else
            MANIFEST_URL="https://github.com/${OWNER_REPO}/releases/latest/download/module.json"
          fi

          DOWNLOAD_URL="https://github.com/${OWNER_REPO}/releases/download/${TAG}/pf2e_reroll_stats.zip"

          jq --arg v "$VERSION" \
             --arg manifest "$MANIFEST_URL" \
             --arg download "$DOWNLOAD_URL" \
             '.version=$v
              | .manifest?=$manifest
              | .download?=$download' \
             module.json > module.json.tmp

          mv module.json.tmp module.json
          echo "module.json updated:"
          cat module.json

      - name: Build zip
        run: |
          ZIPNAME="pf2e_reroll_stats.zip"
          cat > zip-include.txt << 'EOF'
          assets
          lang
          packs
          _build
          scripts
          module.json
          README.md
          LICENSE
          CHANGELOG.md
          EOF

          zip -r "$ZIPNAME" -@ < zip-include.txt \
            -x "node_modules/*" \
               "packs/**/_source/*" \
               "*.log" \
               ".git/*" \
               ".github/*" \
               ".vscode/*" \
               "dist/*" \
               "coverage/*"

          echo "Created $ZIPNAME"

      - name: Attach assets to GitHub Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "module.json,pf2e_reroll_stats.zip"
          body: ${{ github.event.release.body }}
          tag: ${{ github.event.release.tag_name }}
          draft: ${{ github.event.release.draft }}
          prerelease: ${{ github.event.release.prerelease }}

      # Only publish stable releases to the Foundry index.
      # Use the /latest manifest so Foundry update checks always pull the newest stable.
      - name: Publish to FoundryVTT Package Index
        if: ${{ !github.event.release.prerelease }}
        uses: cs96and/FoundryVTT-release-package@v1
        with:
          package-token: ${{ secrets.FOUNDRY_RELEASE_TOKEN }}
          manifest-url: https://github.com/${{ github.repository }}/releases/latest/download/module.json
